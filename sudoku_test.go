package sudoku

import (
	"fmt"
	"reflect"
	"strconv"
	"testing"
)

//TestGetSubSudoku
func TestGetSubSudoku(t *testing.T) {

	// Setup
	samuraiGrid := Grid{
		{0, 0, 5, 7, 0, 0, 0, 2, 0, -1, -1, -1, 0, 0, 9, 6, 0, 0, 0, 2, 0},
		{4, 9, 0, 0, 6, 0, 0, 1, 0, -1, -1, -1, 1, 4, 0, 0, 5, 0, 0, 3, 0},
		{0, 0, 7, 0, 0, 4, 9, 0, 6, -1, -1, -1, 0, 0, 2, 0, 0, 1, 7, 0, 8},
		{0, 0, 6, 0, 0, 0, 0, 0, 8, -1, -1, -1, 0, 0, 3, 0, 0, 0, 0, 0, 2},
		{0, 7, 0, 0, 0, 0, 0, 9, 0, -1, -1, -1, 0, 5, 0, 0, 0, 0, 0, 6, 0},
		{2, 0, 0, 0, 0, 0, 3, 0, 0, -1, -1, -1, 4, 0, 0, 0, 0, 0, 5, 0, 0},
		{5, 0, 8, 9, 0, 0, 7, 0, 0, 0, 0, 0, 6, 0, 5, 8, 0, 0, 2, 0, 0},
		{0, 1, 0, 0, 3, 0, 0, 8, 5, 0, 0, 0, 0, 1, 0, 0, 7, 0, 0, 8, 6},
		{0, 2, 0, 0, 0, 5, 6, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 4, 3, 0, 0},
		{-1, -1, -1, -1, -1, -1, 0, 0, 0, 4, 0, 6, 0, 0, 0, -1, -1, -1, -1, -1, -1},
		{-1, -1, -1, -1, -1, -1, 0, 0, 6, 0, 5, 0, 2, 0, 0, -1, -1, -1, -1, -1, -1},
		{-1, -1, -1, -1, -1, -1, 0, 0, 0, 2, 0, 8, 0, 0, 0, -1, -1, -1, -1, -1, -1},
		{0, 0, 8, 5, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 8, 9, 0, 0, 0, 6, 0},
		{6, 2, 0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 9, 6, 0, 0, 2, 0, 0, 5, 0},
		{0, 0, 7, 0, 0, 8, 9, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 8, 1, 0, 9},
		{0, 0, 6, 0, 0, 0, 0, 0, 2, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 6},
		{0, 5, 0, 0, 0, 0, 0, 4, 0, -1, -1, -1, 0, 8, 0, 0, 0, 0, 0, 2, 0},
		{8, 0, 0, 0, 0, 0, 3, 0, 0, -1, -1, -1, 7, 0, 0, 0, 0, 0, 5, 0, 0},
		{1, 0, 5, 9, 0, 0, 2, 0, 0, -1, -1, -1, 2, 0, 6, 7, 0, 0, 4, 0, 0},
		{0, 3, 0, 0, 6, 0, 0, 7, 1, -1, -1, -1, 0, 3, 0, 0, 9, 0, 0, 7, 8},
		{0, 6, 0, 0, 0, 3, 5, 0, 0, -1, -1, -1, 0, 9, 0, 0, 0, 4, 2, 0, 0},
	}

	var samuraiSudoku SamuraiSudoku
	samuraiSudoku.SetGrid(samuraiGrid)

	testCases := []struct {
		position Position
		want     Grid
	}{
		{
			TopLeft, Grid{
				{0, 0, 5, 7, 0, 0, 0, 2, 0},
				{4, 9, 0, 0, 6, 0, 0, 1, 0},
				{0, 0, 7, 0, 0, 4, 9, 0, 6},
				{0, 0, 6, 0, 0, 0, 0, 0, 8},
				{0, 7, 0, 0, 0, 0, 0, 9, 0},
				{2, 0, 0, 0, 0, 0, 3, 0, 0},
				{5, 0, 8, 9, 0, 0, 7, 0, 0},
				{0, 1, 0, 0, 3, 0, 0, 8, 5},
				{0, 2, 0, 0, 0, 5, 6, 0, 0},
			},
		},
		{
			TopRight, Grid{
				{0, 0, 9, 6, 0, 0, 0, 2, 0},
				{1, 4, 0, 0, 5, 0, 0, 3, 0},
				{0, 0, 2, 0, 0, 1, 7, 0, 8},
				{0, 0, 3, 0, 0, 0, 0, 0, 2},
				{0, 5, 0, 0, 0, 0, 0, 6, 0},
				{4, 0, 0, 0, 0, 0, 5, 0, 0},
				{6, 0, 5, 8, 0, 0, 2, 0, 0},
				{0, 1, 0, 0, 7, 0, 0, 8, 6},
				{0, 2, 0, 0, 0, 4, 3, 0, 0},
			},
		},
		{
			Centre, Grid{
				{7, 0, 0, 0, 0, 0, 6, 0, 5},
				{0, 8, 5, 0, 0, 0, 0, 1, 0},
				{6, 0, 0, 0, 1, 0, 0, 2, 0},
				{0, 0, 0, 4, 0, 6, 0, 0, 0},
				{0, 0, 6, 0, 5, 0, 2, 0, 0},
				{0, 0, 0, 2, 0, 8, 0, 0, 0},
				{0, 2, 0, 0, 3, 0, 0, 0, 8},
				{0, 5, 0, 0, 0, 0, 9, 6, 0},
				{9, 0, 3, 0, 0, 0, 0, 0, 2},
			},
		},
		{
			BottomLeft, Grid{
				{0, 0, 8, 5, 0, 0, 0, 2, 0},
				{6, 2, 0, 0, 4, 0, 0, 5, 0},
				{0, 0, 7, 0, 0, 8, 9, 0, 3},
				{0, 0, 6, 0, 0, 0, 0, 0, 2},
				{0, 5, 0, 0, 0, 0, 0, 4, 0},
				{8, 0, 0, 0, 0, 0, 3, 0, 0},
				{1, 0, 5, 9, 0, 0, 2, 0, 0},
				{0, 3, 0, 0, 6, 0, 0, 7, 1},
				{0, 6, 0, 0, 0, 3, 5, 0, 0},
			},
		},
		{
			BottomRight, Grid{
				{0, 0, 8, 9, 0, 0, 0, 6, 0},
				{9, 6, 0, 0, 2, 0, 0, 5, 0},
				{0, 0, 2, 0, 0, 8, 1, 0, 9},
				{0, 0, 1, 0, 0, 0, 0, 0, 6},
				{0, 8, 0, 0, 0, 0, 0, 2, 0},
				{7, 0, 0, 0, 0, 0, 5, 0, 0},
				{2, 0, 6, 7, 0, 0, 4, 0, 0},
				{0, 3, 0, 0, 9, 0, 0, 7, 8},
				{0, 9, 0, 0, 0, 4, 2, 0, 0},
			},
		},
	}

	for _, tc := range testCases {
		t.Run(fmt.Sprintf("%s sub-sudoku", tc.position), func(t *testing.T) {
			got := samuraiSudoku.GetSubSudoku(tc.position)
			if !reflect.DeepEqual(tc.want, got) {
				t.Fatalf("want\n%v\ngot\n%v ", tc.want, got)
			}
		})
	}
}

func TestGrid_isSolved(t *testing.T) {
	tests := []struct {
		g    Grid
		want bool
	}{
		// TODO: Add test cases.
		{Grid{
			{1, 6, 5, 7, 9, 8, 4, 2, 3, -1, -1, -1, 7, 3, 9, 6, 4, 8, 1, 2, 5},
			{4, 9, 2, 5, 6, 3, 8, 1, 7, -1, -1, -1, 1, 4, 8, 7, 5, 2, 6, 3, 9},
			{3, 8, 7, 2, 1, 4, 9, 5, 6, -1, -1, -1, 5, 6, 2, 3, 9, 1, 7, 4, 8},
			{9, 4, 6, 3, 5, 2, 1, 7, 8, -1, -1, -1, 9, 7, 3, 5, 8, 6, 4, 1, 2},
			{8, 7, 3, 6, 4, 1, 5, 9, 2, -1, -1, -1, 2, 5, 1, 4, 3, 9, 8, 6, 7},
			{2, 5, 1, 8, 7, 9, 3, 6, 4, -1, -1, -1, 4, 8, 6, 1, 2, 7, 5, 9, 3},
			{5, 3, 8, 9, 2, 6, 7, 4, 1, 8, 2, 3, 6, 9, 5, 8, 1, 3, 2, 7, 4},
			{6, 1, 9, 4, 3, 7, 2, 8, 5, 9, 6, 7, 3, 1, 4, 2, 7, 5, 9, 8, 6},
			{7, 2, 4, 1, 8, 5, 6, 3, 9, 5, 1, 4, 8, 2, 7, 9, 6, 4, 3, 5, 1},
			{-1, -1, -1, -1, -1, -1, 3, 9, 2, 4, 7, 6, 5, 8, 1, -1, -1, -1, -1, -1, -1},
			{-1, -1, -1, -1, -1, -1, 8, 7, 6, 3, 5, 1, 2, 4, 9, -1, -1, -1, -1, -1, -1},
			{-1, -1, -1, -1, -1, -1, 5, 1, 4, 2, 9, 8, 7, 3, 6, -1, -1, -1, -1, -1, -1},
			{9, 1, 8, 5, 3, 6, 4, 2, 7, 6, 3, 9, 1, 5, 8, 9, 4, 3, 7, 6, 2},
			{6, 2, 3, 7, 4, 9, 1, 5, 8, 7, 4, 2, 9, 6, 3, 1, 2, 7, 8, 5, 4},
			{5, 4, 7, 1, 2, 8, 9, 6, 3, 1, 8, 5, 4, 7, 2, 6, 5, 8, 1, 3, 9},
			{3, 9, 6, 4, 5, 1, 7, 8, 2, -1, -1, -1, 3, 4, 1, 5, 7, 2, 9, 8, 6},
			{2, 5, 1, 3, 8, 7, 6, 4, 9, -1, -1, -1, 6, 8, 5, 4, 1, 9, 3, 2, 7},
			{8, 7, 4, 6, 9, 2, 3, 1, 5, -1, -1, -1, 7, 2, 9, 8, 3, 6, 5, 4, 1},
			{1, 8, 5, 9, 7, 4, 2, 3, 6, -1, -1, -1, 2, 1, 6, 7, 8, 5, 4, 9, 3},
			{4, 3, 9, 2, 6, 5, 8, 7, 1, -1, -1, -1, 5, 3, 4, 2, 9, 1, 6, 7, 8},
			{7, 6, 2, 8, 1, 3, 5, 9, 4, -1, -1, -1, 8, 9, 7, 3, 6, 4, 2, 1, 5},
		}, true},
		{Grid{
			{0, 0, 5, 7, 0, 0, 0, 2, 0, -1, -1, -1, 0, 0, 9, 6, 0, 0, 0, 2, 0},
			{4, 9, 0, 0, 6, 0, 0, 1, 0, -1, -1, -1, 1, 4, 0, 0, 5, 0, 0, 3, 0},
			{0, 0, 7, 0, 0, 4, 9, 0, 6, -1, -1, -1, 0, 0, 2, 0, 0, 1, 7, 0, 8},
			{0, 0, 6, 0, 0, 0, 0, 0, 8, -1, -1, -1, 0, 0, 3, 0, 0, 0, 0, 0, 2},
			{0, 7, 0, 0, 0, 0, 0, 9, 0, -1, -1, -1, 0, 5, 0, 0, 0, 0, 0, 6, 0},
			{2, 0, 0, 0, 0, 0, 3, 0, 0, -1, -1, -1, 4, 0, 0, 0, 0, 0, 5, 0, 0},
			{5, 0, 8, 9, 0, 0, 7, 0, 0, 0, 0, 0, 6, 0, 5, 8, 0, 0, 2, 0, 0},
			{0, 1, 0, 0, 3, 0, 0, 8, 5, 0, 0, 0, 0, 1, 0, 0, 7, 0, 0, 8, 6},
			{0, 2, 0, 0, 0, 5, 6, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 4, 3, 0, 0},
			{-1, -1, -1, -1, -1, -1, 0, 0, 0, 4, 0, 6, 0, 0, 0, -1, -1, -1, -1, -1, -1},
			{-1, -1, -1, -1, -1, -1, 0, 0, 6, 0, 5, 0, 2, 0, 0, -1, -1, -1, -1, -1, -1},
			{-1, -1, -1, -1, -1, -1, 0, 0, 0, 2, 0, 8, 0, 0, 0, -1, -1, -1, -1, -1, -1},
			{0, 0, 8, 5, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 8, 9, 0, 0, 0, 6, 0},
			{6, 2, 0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 9, 6, 0, 0, 2, 0, 0, 5, 0},
			{0, 0, 7, 0, 0, 8, 9, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 8, 1, 0, 9},
			{0, 0, 6, 0, 0, 0, 0, 0, 2, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 6},
			{0, 5, 0, 0, 0, 0, 0, 4, 0, -1, -1, -1, 0, 8, 0, 0, 0, 0, 0, 2, 0},
			{8, 0, 0, 0, 0, 0, 3, 0, 0, -1, -1, -1, 7, 0, 0, 0, 0, 0, 5, 0, 0},
			{1, 0, 5, 9, 0, 0, 2, 0, 0, -1, -1, -1, 2, 0, 6, 7, 0, 0, 4, 0, 0},
			{0, 3, 0, 0, 6, 0, 0, 7, 1, -1, -1, -1, 0, 3, 0, 0, 9, 0, 0, 7, 8},
			{0, 6, 0, 0, 0, 3, 5, 0, 0, -1, -1, -1, 0, 9, 0, 0, 0, 4, 2, 0, 0},
		}, false},
		{Grid{
			{0, 0, 5, 7, 0, 0, 0, 2, 0},
			{4, 9, 0, 0, 6, 0, 0, 1, 0},
			{0, 0, 7, 0, 0, 4, 9, 0, 6},
			{0, 0, 6, 0, 0, 0, 0, 0, 8},
			{0, 7, 0, 0, 0, 0, 0, 9, 0},
			{2, 0, 0, 0, 0, 0, 3, 0, 0},
			{5, 0, 8, 9, 0, 0, 7, 0, 0},
			{0, 1, 0, 0, 3, 0, 0, 8, 5},
			{0, 2, 0, 0, 0, 5, 6, 0, 0},
		}, false},
	}
	for i, tt := range tests {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			if got := tt.g.isSolved(); got != tt.want {
				t.Errorf("isSolved() for\n%v = %v, want %v", tt.g, got, tt.want)
			}
		})
	}
}

//TestSolveSamuraiSudoku
func TestSolveSamuraiSudoku(t *testing.T) {

	var SamuraiGrid = Grid{
		{0, 0, 5, 7, 0, 0, 0, 2, 0, -1, -1, -1, 0, 0, 9, 6, 0, 0, 0, 2, 0},
		{4, 9, 0, 0, 6, 0, 0, 1, 0, -1, -1, -1, 1, 4, 0, 0, 5, 0, 0, 3, 0},
		{0, 0, 7, 0, 0, 4, 9, 0, 6, -1, -1, -1, 0, 0, 2, 0, 0, 1, 7, 0, 8},
		{0, 0, 6, 0, 0, 0, 0, 0, 8, -1, -1, -1, 0, 0, 3, 0, 0, 0, 0, 0, 2},
		{0, 7, 0, 0, 0, 0, 0, 9, 0, -1, -1, -1, 0, 5, 0, 0, 0, 0, 0, 6, 0},
		{2, 0, 0, 0, 0, 0, 3, 0, 0, -1, -1, -1, 4, 0, 0, 0, 0, 0, 5, 0, 0},
		{5, 0, 8, 9, 0, 0, 7, 0, 0, 0, 0, 0, 6, 0, 5, 8, 0, 0, 2, 0, 0},
		{0, 1, 0, 0, 3, 0, 0, 8, 5, 0, 0, 0, 0, 1, 0, 0, 7, 0, 0, 8, 6},
		{0, 2, 0, 0, 0, 5, 6, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 4, 3, 0, 0},
		{-1, -1, -1, -1, -1, -1, 0, 0, 0, 4, 0, 6, 0, 0, 0, -1, -1, -1, -1, -1, -1},
		{-1, -1, -1, -1, -1, -1, 0, 0, 6, 0, 5, 0, 2, 0, 0, -1, -1, -1, -1, -1, -1},
		{-1, -1, -1, -1, -1, -1, 0, 0, 0, 2, 0, 8, 0, 0, 0, -1, -1, -1, -1, -1, -1},
		{0, 0, 8, 5, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 8, 9, 0, 0, 0, 6, 0},
		{6, 2, 0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 9, 6, 0, 0, 2, 0, 0, 5, 0},
		{0, 0, 7, 0, 0, 8, 9, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 8, 1, 0, 9},
		{0, 0, 6, 0, 0, 0, 0, 0, 2, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 6},
		{0, 5, 0, 0, 0, 0, 0, 4, 0, -1, -1, -1, 0, 8, 0, 0, 0, 0, 0, 2, 0},
		{8, 0, 0, 0, 0, 0, 3, 0, 0, -1, -1, -1, 7, 0, 0, 0, 0, 0, 5, 0, 0},
		{1, 0, 5, 9, 0, 0, 2, 0, 0, -1, -1, -1, 2, 0, 6, 7, 0, 0, 4, 0, 0},
		{0, 3, 0, 0, 6, 0, 0, 7, 1, -1, -1, -1, 0, 3, 0, 0, 9, 0, 0, 7, 8},
		{0, 6, 0, 0, 0, 3, 5, 0, 0, -1, -1, -1, 0, 9, 0, 0, 0, 4, 2, 0, 0},
	}
	var samuraiSudoku SamuraiSudoku

	samuraiSudoku.SetGrid(SamuraiGrid)

	want := Grid{
		{1, 6, 5, 7, 9, 8, 4, 2, 3, -1, -1, -1, 7, 3, 9, 6, 4, 8, 1, 2, 5},
		{4, 9, 2, 5, 6, 3, 8, 1, 7, -1, -1, -1, 1, 4, 8, 7, 5, 2, 6, 3, 9},
		{3, 8, 7, 2, 1, 4, 9, 5, 6, -1, -1, -1, 5, 6, 2, 3, 9, 1, 7, 4, 8},
		{9, 4, 6, 3, 5, 2, 1, 7, 8, -1, -1, -1, 9, 7, 3, 5, 8, 6, 4, 1, 2},
		{8, 7, 3, 6, 4, 1, 5, 9, 2, -1, -1, -1, 2, 5, 1, 4, 3, 9, 8, 6, 7},
		{2, 5, 1, 8, 7, 9, 3, 6, 4, -1, -1, -1, 4, 8, 6, 1, 2, 7, 5, 9, 3},
		{5, 3, 8, 9, 2, 6, 7, 4, 1, 8, 2, 3, 6, 9, 5, 8, 1, 3, 2, 7, 4},
		{6, 1, 9, 4, 3, 7, 2, 8, 5, 9, 6, 7, 3, 1, 4, 2, 7, 5, 9, 8, 6},
		{7, 2, 4, 1, 8, 5, 6, 3, 9, 5, 1, 4, 8, 2, 7, 9, 6, 4, 3, 5, 1},
		{-1, -1, -1, -1, -1, -1, 3, 9, 2, 4, 7, 6, 5, 8, 1, -1, -1, -1, -1, -1, -1},
		{-1, -1, -1, -1, -1, -1, 8, 7, 6, 3, 5, 1, 2, 4, 9, -1, -1, -1, -1, -1, -1},
		{-1, -1, -1, -1, -1, -1, 5, 1, 4, 2, 9, 8, 7, 3, 6, -1, -1, -1, -1, -1, -1},
		{9, 1, 8, 5, 3, 6, 4, 2, 7, 6, 3, 9, 1, 5, 8, 9, 4, 3, 7, 6, 2},
		{6, 2, 3, 7, 4, 9, 1, 5, 8, 7, 4, 2, 9, 6, 3, 1, 2, 7, 8, 5, 4},
		{5, 4, 7, 1, 2, 8, 9, 6, 3, 1, 8, 5, 4, 7, 2, 6, 5, 8, 1, 3, 9},
		{3, 9, 6, 4, 5, 1, 7, 8, 2, -1, -1, -1, 3, 4, 1, 5, 7, 2, 9, 8, 6},
		{2, 5, 1, 3, 8, 7, 6, 4, 9, -1, -1, -1, 6, 8, 5, 4, 1, 9, 3, 2, 7},
		{8, 7, 4, 6, 9, 2, 3, 1, 5, -1, -1, -1, 7, 2, 9, 8, 3, 6, 5, 4, 1},
		{1, 8, 5, 9, 7, 4, 2, 3, 6, -1, -1, -1, 2, 1, 6, 7, 8, 5, 4, 9, 3},
		{4, 3, 9, 2, 6, 5, 8, 7, 1, -1, -1, -1, 5, 3, 4, 2, 9, 1, 6, 7, 8},
		{7, 6, 2, 8, 1, 3, 5, 9, 4, -1, -1, -1, 8, 9, 7, 3, 6, 4, 2, 1, 5},
	}

	got := SolveSamuraiSudoku(&samuraiSudoku)

	if !reflect.DeepEqual(want, got) {
		t.Fatalf("want\n%v\ngot\n%v ", want, got)
	}
}

//TestConcurrentSamuraiSudokuSolver
func TestConcurrentSolveSamuraiSudoku(t *testing.T) {

	getSamurai := func() *SamuraiSudoku {
		var SamuraiGrid = Grid{
			{0, 0, 5, 7, 0, 0, 0, 2, 0, -1, -1, -1, 0, 0, 9, 6, 0, 0, 0, 2, 0},
			{4, 9, 0, 0, 6, 0, 0, 1, 0, -1, -1, -1, 1, 4, 0, 0, 5, 0, 0, 3, 0},
			{0, 0, 7, 0, 0, 4, 9, 0, 6, -1, -1, -1, 0, 0, 2, 0, 0, 1, 7, 0, 8},
			{0, 0, 6, 0, 0, 0, 0, 0, 8, -1, -1, -1, 0, 0, 3, 0, 0, 0, 0, 0, 2},
			{0, 7, 0, 0, 0, 0, 0, 9, 0, -1, -1, -1, 0, 5, 0, 0, 0, 0, 0, 6, 0},
			{2, 0, 0, 0, 0, 0, 3, 0, 0, -1, -1, -1, 4, 0, 0, 0, 0, 0, 5, 0, 0},
			{5, 0, 8, 9, 0, 0, 7, 0, 0, 0, 0, 0, 6, 0, 5, 8, 0, 0, 2, 0, 0},
			{0, 1, 0, 0, 3, 0, 0, 8, 5, 0, 0, 0, 0, 1, 0, 0, 7, 0, 0, 8, 6},
			{0, 2, 0, 0, 0, 5, 6, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 4, 3, 0, 0},
			{-1, -1, -1, -1, -1, -1, 0, 0, 0, 4, 0, 6, 0, 0, 0, -1, -1, -1, -1, -1, -1},
			{-1, -1, -1, -1, -1, -1, 0, 0, 6, 0, 5, 0, 2, 0, 0, -1, -1, -1, -1, -1, -1},
			{-1, -1, -1, -1, -1, -1, 0, 0, 0, 2, 0, 8, 0, 0, 0, -1, -1, -1, -1, -1, -1},
			{0, 0, 8, 5, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 8, 9, 0, 0, 0, 6, 0},
			{6, 2, 0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 9, 6, 0, 0, 2, 0, 0, 5, 0},
			{0, 0, 7, 0, 0, 8, 9, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 8, 1, 0, 9},
			{0, 0, 6, 0, 0, 0, 0, 0, 2, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 6},
			{0, 5, 0, 0, 0, 0, 0, 4, 0, -1, -1, -1, 0, 8, 0, 0, 0, 0, 0, 2, 0},
			{8, 0, 0, 0, 0, 0, 3, 0, 0, -1, -1, -1, 7, 0, 0, 0, 0, 0, 5, 0, 0},
			{1, 0, 5, 9, 0, 0, 2, 0, 0, -1, -1, -1, 2, 0, 6, 7, 0, 0, 4, 0, 0},
			{0, 3, 0, 0, 6, 0, 0, 7, 1, -1, -1, -1, 0, 3, 0, 0, 9, 0, 0, 7, 8},
			{0, 6, 0, 0, 0, 3, 5, 0, 0, -1, -1, -1, 0, 9, 0, 0, 0, 4, 2, 0, 0},
		}
		var samuraiSudoku SamuraiSudoku

		samuraiSudoku.SetGrid(SamuraiGrid)
		return &samuraiSudoku
	}

	want := Grid{
		{1, 6, 5, 7, 9, 8, 4, 2, 3, -1, -1, -1, 7, 3, 9, 6, 4, 8, 1, 2, 5},
		{4, 9, 2, 5, 6, 3, 8, 1, 7, -1, -1, -1, 1, 4, 8, 7, 5, 2, 6, 3, 9},
		{3, 8, 7, 2, 1, 4, 9, 5, 6, -1, -1, -1, 5, 6, 2, 3, 9, 1, 7, 4, 8},
		{9, 4, 6, 3, 5, 2, 1, 7, 8, -1, -1, -1, 9, 7, 3, 5, 8, 6, 4, 1, 2},
		{8, 7, 3, 6, 4, 1, 5, 9, 2, -1, -1, -1, 2, 5, 1, 4, 3, 9, 8, 6, 7},
		{2, 5, 1, 8, 7, 9, 3, 6, 4, -1, -1, -1, 4, 8, 6, 1, 2, 7, 5, 9, 3},
		{5, 3, 8, 9, 2, 6, 7, 4, 1, 8, 2, 3, 6, 9, 5, 8, 1, 3, 2, 7, 4},
		{6, 1, 9, 4, 3, 7, 2, 8, 5, 9, 6, 7, 3, 1, 4, 2, 7, 5, 9, 8, 6},
		{7, 2, 4, 1, 8, 5, 6, 3, 9, 5, 1, 4, 8, 2, 7, 9, 6, 4, 3, 5, 1},
		{-1, -1, -1, -1, -1, -1, 3, 9, 2, 4, 7, 6, 5, 8, 1, -1, -1, -1, -1, -1, -1},
		{-1, -1, -1, -1, -1, -1, 8, 7, 6, 3, 5, 1, 2, 4, 9, -1, -1, -1, -1, -1, -1},
		{-1, -1, -1, -1, -1, -1, 5, 1, 4, 2, 9, 8, 7, 3, 6, -1, -1, -1, -1, -1, -1},
		{9, 1, 8, 5, 3, 6, 4, 2, 7, 6, 3, 9, 1, 5, 8, 9, 4, 3, 7, 6, 2},
		{6, 2, 3, 7, 4, 9, 1, 5, 8, 7, 4, 2, 9, 6, 3, 1, 2, 7, 8, 5, 4},
		{5, 4, 7, 1, 2, 8, 9, 6, 3, 1, 8, 5, 4, 7, 2, 6, 5, 8, 1, 3, 9},
		{3, 9, 6, 4, 5, 1, 7, 8, 2, -1, -1, -1, 3, 4, 1, 5, 7, 2, 9, 8, 6},
		{2, 5, 1, 3, 8, 7, 6, 4, 9, -1, -1, -1, 6, 8, 5, 4, 1, 9, 3, 2, 7},
		{8, 7, 4, 6, 9, 2, 3, 1, 5, -1, -1, -1, 7, 2, 9, 8, 3, 6, 5, 4, 1},
		{1, 8, 5, 9, 7, 4, 2, 3, 6, -1, -1, -1, 2, 1, 6, 7, 8, 5, 4, 9, 3},
		{4, 3, 9, 2, 6, 5, 8, 7, 1, -1, -1, -1, 5, 3, 4, 2, 9, 1, 6, 7, 8},
		{7, 6, 2, 8, 1, 3, 5, 9, 4, -1, -1, -1, 8, 9, 7, 3, 6, 4, 2, 1, 5},
	}

	for i := 0; i < 1; i++ {
		samurai := getSamurai()
		got := ConcurrentSolveSamuraiSudoku(samurai)

		if !reflect.DeepEqual(want, got) {
			t.Fatalf("want\n%v\ngot\n%v ", want, got)
		}
	}

}
